# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
name: "CodeQL"

on:
  push:
    branches: [master]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [master]
  schedule:
    - cron: '0 8 * * 0'

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-20.04

    strategy:
      fail-fast: false
      matrix:
        # Override automatic language detection by changing the below list
        # Supported options are ['csharp', 'cpp', 'go', 'java', 'javascript', 'python']
        language: ['cpp']
        # Learn more...
        # https://docs.github.com/en/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#overriding-automatic-language-detection

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        # We must fetch at least the immediate parents so that if this is
        # a pull request then we can checkout the head.
        fetch-depth: 2
        path: remote-software

    - name: Determine integrations.library version
      shell: bash
      run: |
        YIO_INTG_LIB_VERSION=$(cat "${GITHUB_WORKSPACE}/remote-software/dependencies.cfg" | awk '/^integrations.library:/{print $2}')
        echo "Required integrations.library: $YIO_INTG_LIB_VERSION"
        echo "YIO_INTG_LIB_VERSION=$YIO_INTG_LIB_VERSION" >> $GITHUB_ENV

    - name: Checkout integrations.library
      uses: actions/checkout@v2
      with:
        repository: YIO-Remote/integrations.library
        ref: ${{ env.YIO_INTG_LIB_VERSION }}
        path: integrations.library

    # If this run was triggered by a pull request event, then checkout
    # the head of the pull request instead of the merge commit.
    - run: git checkout HEAD^2
      if: ${{ github.event_name == 'pull_request' }}
      working-directory: remote-software

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v1
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file. 
        # Prefix the list here with "+" to use these queries and those in the config file.
        # queries: ./path/to/local/query, your-org/your-repo/queries@main

    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v1
      with:
        path: ../Qt
        key: ${{ runner.os }}-QtCache

    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        modules: qtvirtualkeyboard, qtnetworkauth
        cached: ${{ steps.cache-qt.outputs.cache-hit }}

    - name: Install system libs
      if: runner.os == 'Linux'
      run: |
        sudo apt install libavahi-client-dev libgl1-mesa-dev g++-8 libstdc++-8-dev

    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    #- name: Autobuild
    #  uses: github/codeql-action/autobuild@v1

    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö https://git.io/JvXDl

    # ‚úèÔ∏è If the Autobuild fails above, remove it and uncomment the following three lines
    #    and modify them (or add more) to build your code if your project
    #    uses a compiled language

    - name: Build
      run: |
        qmake
        make -j 3
      working-directory: remote-software

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v1
      with:
        checkout_path: ${{ github.workspace }}/remote-software
