name: QMake Build Matrix

on: [push]

env:
  QT_VERSION: 5.12.6
  QT_CREATOR_VERSION: 4.8.2
  # QT_VERSION: 5.14.0
  # QT_CREATOR_VERSION: 4.11.0
  APP_PRO: remote.pro
  APP_NAME: remote
  YIO_BIN: "../binaries"
  DEBUG_OUTPUT: "false"

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
        - {
            name: "Linux Latest x64", artifact: "Linux-x64",
            os: ubuntu-latest
          }
        - {
            name: "macOS Latest x64", artifact: "macOS-x64",
            os: macos-latest
          }
        - {
            name: "Windows Latest x64", artifact: "Windows-x64",
            os: windows-latest,
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          }

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        path: remote-software

    - name: Checkout integrations.library
      uses: actions/checkout@v2
      with:
        repository: YIO-Remote/integrations.library
        # FIXME check for master branch build!
        ref: develop
        path: integrations.library

    - name: Debug pathes
      shell: bash
      run: |
        pwd
        ls -lah ${GITHUB_WORKSPACE}
        ls -lah ${GITHUB_WORKSPACE}/remote-software
        ls -lah ${GITHUB_WORKSPACE}/integrations.library

    - name: Installing system libs
      shell: cmake -P {0}
      run: |
        if ("${{ runner.os }}" STREQUAL "Linux")
          execute_process(
            COMMAND sudo apt install libavahi-client-dev libgl1-mesa-dev
          )
        endif()

    - name: Download Qt Creator
      id: qt_creator
      shell: cmake -P {0}
      run: |
        string(REGEX MATCH "([0-9]+.[0-9]+).[0-9]+" outvar "$ENV{QT_CREATOR_VERSION}")
        set(qtc_base_url "https://download.qt.io/official_releases/qtcreator/${CMAKE_MATCH_1}/$ENV{QT_CREATOR_VERSION}")

        if ("${{ runner.os }}" STREQUAL "Windows")
          set(qtc_output_directory "$ENV{YIO_BIN}")
          set(qtc_binary_name "$ENV{APP_NAME}.exe")
          # special handling for Qt Creator 4.8 :-(
          if (${{ env.QT_CREATOR_VERSION }} MATCHES "4.8.*")
            set(qtc_platform "windows_vs2015_64")
          elseif ("${{ matrix.config.environment_script }}" MATCHES "vcvars64.bat")
            set(qtc_platform "windows_msvc2017_x64")
          elseif ("${{ matrix.config.environment_script }}" MATCHES "vcvars32.bat")
            set(qtc_platform "windows_msvc2017_x86")
          endif()
        elseif ("${{ runner.os }}" STREQUAL "Linux")
          set(qtc_output_directory "$ENV{YIO_BIN}")
          set(qtc_binary_name "$ENV{APP_NAME}")
          set(qtc_platform "linux_gcc_64_rhel72")
        elseif ("${{ runner.os }}" STREQUAL "macOS")
          set(qtc_output_directory "$ENV{YIO_BIN}")
          set(qtc_binary_name "$ENV{APP_NAME}.app")
          set(qtc_platform "mac_x64")
        endif()

        # Save the path for other steps
        message("::set-output name=qtc_binary_name::${qtc_binary_name}")
        message("::set-output name=qtc_output_directory::${qtc_output_directory}")

        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/../downloads" download_dir)

        file(MAKE_DIRECTORY ${qtc_output_directory})
        file(MAKE_DIRECTORY qtcreator)
        file(MAKE_DIRECTORY ${download_dir})

        if (${{ env.DEBUG_OUTPUT }} STREQUAL "true")
          message("Using download directory: ${download_dir}")
          set(tar_options "xvf")
        else()
          set(tar_options "xf")
        endif()

        foreach(package qtcreator)
          set(download_file "${qtc_base_url}/installer_source/${qtc_platform}/${package}.7z")
          message("Downloading file: '${download_file}'")
          file(DOWNLOAD
            "${download_file}" ${download_dir}/${package}.7z
            STATUS status
            LOG log)
          list(GET status 0 status_code)
          list(GET status 1 status_string)
          if (NOT status_code EQUAL 0)
            message(FATAL_ERROR "Downloading '${download_file}' failed
            status_code: ${status_code}
            status_string: ${status_string}
            log: ${log}")
          endif()

          message("Unpacking file: ${download_dir}/${package}.7z")
          execute_process(COMMAND
            ${CMAKE_COMMAND} -E tar ${tar_options} ${download_dir}/${package}.7z
            WORKING_DIRECTORY qtcreator
            RESULT_VARIABLE result
          )
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Error unpacking '${package}.7z': ${result}")
          endif()
        endforeach()

        if ("${{ runner.os }}" STREQUAL "macOS")
          execute_process(
            COMMAND ${CMAKE_COMMAND} -E make_directory qtcreator/bin
            COMMAND ${CMAKE_COMMAND} -E create_symlink
              "$ENV{GITHUB_WORKSPACE}/qtcreator/Qt Creator.app"
              "$ENV{GITHUB_WORKSPACE}/qtcreator/bin/Qt Creator.app"
          )
        endif()

    - name: List Qt Creator dirs
      if: env.DEBUG_OUTPUT == 'true'
      shell: bash
      run: |
        ls -lah
        ls -lah qtcreator || true
        ls -lah qtcreator/bin || true
        ls -lah qtcreator/lib/Qt/lib || true
        ls -lah ${{ steps.qt.outputs.qt_dir }}/bin || true

    - name: Download Qt
      id: qt
      shell: cmake -P {0}
      run: |
        set(qt_version $ENV{QT_VERSION})

        string(REPLACE "." "" qt_version_dotless "${qt_version}")
        if ("${{ runner.os }}" STREQUAL "Windows")
          set(url_os "windows_x86")
          if ("${{ matrix.config.environment_script }}" MATCHES "vcvars64.bat")
            set(qt_package_name "qt.qt5.${qt_version_dotless}.win64_msvc2017_64")
            set(qt_dir_prefix "${qt_version}/msvc2017_64")
          elseif ("${{ matrix.config.environment_script }}" MATCHES "vcvars32.bat")
            set(qt_package_name "qt.qt5.${qt_version_dotless}.win32_msvc2017")
            set(qt_dir_prefix "${qt_version}/msvc2017")
          else()
          endif()
        elseif ("${{ runner.os }}" STREQUAL "Linux")
          set(url_os "linux_x64")
          set(qt_package_name "qt.qt5.${qt_version_dotless}.gcc_64")
          set(qt_dir_prefix "${qt_version}/gcc_64")
        elseif ("${{ runner.os }}" STREQUAL "macOS")
          set(url_os "mac_x64")
          set(qt_package_name "qt.qt5.${qt_version_dotless}.clang_64")
          set(qt_dir_prefix "${qt_version}/clang_64")
        endif()

        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/../downloads" download_dir)
        file(MAKE_DIRECTORY ${download_dir})

        set(qt_base_url "https://download.qt.io/online/qtsdkrepository/${url_os}/desktop/qt5_${qt_version_dotless}")

        set(download_file "${qt_base_url}/Updates.xml")
        message("Downloading file: '${download_file}'")
        file(DOWNLOAD "${download_file}" ${download_dir}/Updates.xml
            STATUS status
            LOG log
        )
        list(GET status 0 status_code)
        list(GET status 1 status_string)
        if (NOT status_code EQUAL 0)
          message(FATAL_ERROR "Downloading '${download_file}' failed
          status_code: ${status_code}
          status_string: ${status_string}
          log: ${log}")
        endif()

        file(READ ${download_dir}/Updates.xml updates_xml)
        string(REGEX MATCH "<Name>${qt_package_name}.*<Version>([0-9+-.]+)</Version>.*<DownloadableArchives>qtbase([a-zA-Z0-9_-]+).7z"
          updates_xml_output "${updates_xml}")
        set(package_version ${CMAKE_MATCH_1})
        set(package_suffix ${CMAKE_MATCH_2})
        string(REPLACE "-debug-symbols" "" package_suffix "${package_suffix}")

        # Workaround for CMake's greedy regex
        if ("${{ matrix.config.environment_script }}" MATCHES "vcvars32.bat")
          string(REPLACE "X86_64" "X86" package_suffix "${package_suffix}")
        endif()

        file(MAKE_DIRECTORY qt5)

        # Save the path for other steps
        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/qt5/${qt_dir_prefix}" qt_dir)
        message("::set-output name=qt_dir::${qt_dir}")

        if (${{ env.DEBUG_OUTPUT }} STREQUAL "true")
          message("Using download directory: ${download_dir}")
          set(tar_options "xvf")
        else()
          set(tar_options "xf")
        endif()

        foreach(package qtbase qtdeclarative qttools qtsvg qtwebsockets qtquickcontrols2 qtconnectivity)
          set(download_file "${qt_base_url}/${qt_package_name}/${package_version}${package}${package_suffix}.7z")
          message("Downloading file: '${download_file}'")
          file(DOWNLOAD
            "${download_file}" ${download_dir}/${package}.7z
            STATUS status
            LOG log
          )
          list(GET status 0 status_code)
          list(GET status 1 status_string)
          if (NOT status_code EQUAL 0)
            message(FATAL_ERROR "Downloading '${download_file}' failed
            status_code: ${status_code}
            status_string: ${status_string}
            log: ${log}")
          endif()

          message("Unpacking file: ${download_dir}/${package}.7z")
          execute_process(COMMAND
            ${CMAKE_COMMAND} -E tar ${tar_options} ${download_dir}/${package}.7z
            WORKING_DIRECTORY qt5
            RESULT_VARIABLE result
          )
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Error unpacking '${package}.7z': ${result}")
          endif()
        endforeach()

        file(READ "qt5/${qt_dir_prefix}/mkspecs/qconfig.pri" qtconfig)
        string(REPLACE "Enterprise" "OpenSource" qtconfig "${qtconfig}")
        string(REPLACE "licheck.exe" "" qtconfig "${qtconfig}")
        string(REPLACE "licheck64" "" qtconfig "${qtconfig}")
        string(REPLACE "licheck_mac" "" qtconfig "${qtconfig}")
        file(WRITE "qt5/${qt_dir_prefix}/mkspecs/qconfig.pri" "${qtconfig}")

    - name: List Qt dirs
      if: env.DEBUG_OUTPUT == 'true'
      shell: bash
      run: |
        ls -lah
        ls -lah qt5/${QT_VERSION} || true
        ls -lah ${{ steps.qt.outputs.qt_dir }}/bin || true

    - name: Create Qt config if missing
      shell: bash
      run: |
        if [ ! -f ${{ steps.qt.outputs.qt_dir }}/bin/qt.conf ]; then
          echo "Creating qt.conf with Prefix pointing to local installation"
          echo "[Paths]
          Prefix=.." > ${{ steps.qt.outputs.qt_dir }}/bin/qt.conf
        fi
        echo "qt.conf content:"
        cat ${{ steps.qt.outputs.qt_dir }}/bin/qt.conf

    - name: Configure
      shell: cmake -P {0}
      run: |
        if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
          execute_process(
            COMMAND "${{ matrix.config.environment_script }}" && set
            OUTPUT_FILE environment_script_output.txt
          )
          file(STRINGS environment_script_output.txt output_lines)
          foreach(line IN LISTS output_lines)
            if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
              set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")

              # Set for other steps
              message("::set-env name=${CMAKE_MATCH_1}::${CMAKE_MATCH_2}")
            endif()
          endforeach()
        endif()

        if ("${{ runner.os }}" STREQUAL "Linux")
          set(ENV{LD_LIBRARY_PATH} "$ENV{GITHUB_WORKSPACE}/qtcreator/lib/Qt/lib:$ENV{LD_LIBRARY_PATH}")
        endif()

        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/qtcreator" qtcreator_dir)

        if (${{ env.DEBUG_OUTPUT }} STREQUAL "true")
          execute_process(
            COMMAND ${{ steps.qt.outputs.qt_dir }}/bin/qmake --version
          )
          execute_process(
            COMMAND ${{ steps.qt.outputs.qt_dir }}/bin/qmake -query
          )
        endif()

        execute_process(
          COMMAND ${{ steps.qt.outputs.qt_dir }}/bin/qmake
            $ENV{APP_PRO}
            CONFIG+=release
            QTC_SOURCE="${qtcreator_dir}"
            QTC_BUILD="${qtcreator_dir}"
          WORKING_DIRECTORY $ENV{GITHUB_WORKSPACE}/remote-software
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "qmake failed: bad exit status")
        endif()

    - name: Build
      shell: cmake -P {0}
      run: |
        if ("${{ runner.os }}" STREQUAL "Windows")
          set(ENV{PATH} "${{ steps.qt.outputs.qt_dir }}/bin/;$ENV{PATH}")
        else()
          set(ENV{PATH} "${{ steps.qt.outputs.qt_dir }}/bin/:$ENV{PATH}")
          set(ENV{LD_LIBRARY_PATH} "$ENV{GITHUB_WORKSPACE}/qtcreator/lib/Qt/lib:$ENV{LD_LIBRARY_PATH}")
        endif()

        include(ProcessorCount)
        ProcessorCount(N)

        set(make_program make -j ${N})
        if ("${{ runner.os }}" STREQUAL "Windows")
          set(make_program "$ENV{GITHUB_WORKSPACE}/qtcreator/bin/jom")
        endif()

        execute_process(
          COMMAND ${make_program}
          WORKING_DIRECTORY $ENV{GITHUB_WORKSPACE}/remote-software
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Build failed: bad exit status")
        endif()

    - uses: actions/upload-artifact@v1
      id: upload_artifact
      with:
        path: ${{ env.YIO_BIN}}
        name: ${{ env.APP_NAME}}-Qt${{ env.QT_VERSION }}-${{ matrix.config.artifact }}

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Store Release url
      run: |
        echo "${{ steps.create_release.outputs.upload_url }}" > ./upload_url

    - uses: actions/upload-artifact@v1
      with:
        path: ./upload_url
        name: upload_url

  publish:
    if: contains(github.ref, 'tags/v')

    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
        - {
            name: "Windows Latest x64", artifact: "Windows-x64",
            os: ubuntu-latest
          }
        - {
            name: "Linux Latest x64", artifact: "Linux-x64",
            os: ubuntu-latest
          }
        - {
            name: "macOS Latest x64", artifact: "macOS-x64",
            os: ubuntu-latest
          }
    needs: release

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v1
      with:
        name: ${{ env.APP_NAME }}-Qt${{ env.QT_VERSION }}-${{ matrix.config.artifact }}
        path: ./

    - run: ls -la

    - run: zip -r ${APP_NAME}-Qt${{ env.QT_VERSION }}-${{ matrix.config.artifact }}.zip .
    - run: ls -la

    - name: Download URL
      uses: actions/download-artifact@v1
      with:
        name: upload_url
        path: ./
    - id: set_upload_url
      run: |
        upload_url=`cat ./upload_url`
        echo ::set-output name=upload_url::$upload_url

    - name: Upload to Release
      id: upload_to_release
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
        asset_path: ./${{ env.APP_NAME }}-Qt${{ env.QT_VERSION }}-${{ matrix.config.artifact }}.zip
        asset_name: ${{ env.APP_NAME }}-Qt${{ env.QT_VERSION }}-${{ matrix.config.artifact }}.zip
        asset_content_type: application/zip
