# GitHub Action to cross compile a YIO Remote Qt project for the YIO remote-os.
# Uses the pre-built Buildroot SDK from remote-os in a custom GitHub action.
# Creates a pre-release if pushed on master branch without a version tag.
# Creates a release if pushed on master branch with a version tag.
---
  name: "Cross Compile & Release"
    
  on:
    push:
    pull_request:

  env:
    APP_NAME: YIO-remote-software
    APP_ARCHITECTURE: RPi0
    PROJECT_NAME: remote-software

  jobs:
    build:
      name: ${{ matrix.config.name }}
      runs-on: ubuntu-latest
      strategy:
        matrix:
          config:
          - {
              name: "RPi0 Release Build", artifact: "RPi0-release",
              qmake-args: "CONFIG+=release"
            }
          - {
              name: "RPi0 Debug Build", artifact: "RPi0-debug",
              qmake-args: "CONFIG+=debug CONFIG+=qml_debug"
            }
  
      steps:
        - name: github env vars
          run: |
            echo "$GITHUB_REF"
            echo "$GITHUB_HEAD_REF"
            echo "$GITHUB_BASE_REF"
  
        - name: Checkout ${{ env.PROJECT_NAME}}
          uses: actions/checkout@v2
          with:
            # History of 500 should be more than enough to calculate commit count since last release tag.
            fetch-depth: 500
            path: ${{ env.PROJECT_NAME}}

        - name: Fetch all tags to determine version
          run: |
            cd ${{ env.PROJECT_NAME}}
            git fetch origin +refs/tags/*:refs/tags/*
            git describe --match "v[0-9]*" --tags HEAD --always
  
        - name: Set build timestamp
          run: echo "::set-env name=TIMESTAMP::$(date +"%Y%m%d_%H%M%S")"
  
        - name: Cross compile
          id: cross-compile
          uses: zehnm/yio-crosscompile-action@master
          with:
            project-name: ${{ env.PROJECT_NAME }}
            output-path: ${GITHUB_WORKSPACE}/binaries/app
            qmake-args: ${{ matrix.config.qmake-args }}
  
        - name: Upload build artefacts
          uses: actions/upload-artifact@v1
          with:
            path: binaries
            name: ${{ env.APP_NAME }}-${{ matrix.config.artifact }}

    release:
      name: Create Release
      if: github.ref == 'refs/heads/master' || contains(github.ref, 'tags/v')
      runs-on: ubuntu-latest
      needs: build

      steps:
        - run: mkdir release debug
        - name: Download release artifact
          uses: actions/download-artifact@v1
          with:
            name: ${{ env.APP_NAME }}-${{ env.APP_ARCHITECTURE }}-release
            path: ./release
        - name: Download debug artifact
          uses: actions/download-artifact@v1
          with:
            name: ${{ env.APP_NAME }}-${{ env.APP_ARCHITECTURE }}-debug
            path: ./debug
        - name: Get artifact version
          run: |
            read -r APP_VERSION < release/version.txt
            echo "::set-env name=APP_VERSION::$APP_VERSION"
            echo "::set-env name=TIMESTAMP::$(date +"%Y%m%d_%H%M%S")"

        - name: Create GitHub development build archives
          if: "!contains(github.ref, 'tags/v')"
          run: |
            tar cvf ${{ env.APP_NAME }}-v${{ env.APP_VERSION }}-${{ env.TIMESTAMP }}-${{ env.APP_ARCHITECTURE }}-debug.tar -C debug .
            tar cvf ${{ env.APP_NAME }}-v${{ env.APP_VERSION }}-${{ env.TIMESTAMP }}-${{ env.APP_ARCHITECTURE }}-release.tar -C release .

        - name: Create Pre-Release ${{ env.APP_VERSION }}
          uses: "marvinpinto/action-automatic-releases@latest"
          if: "!contains(github.ref, 'tags/v')"
          with:
            repo_token: "${{ secrets.GITHUB_TOKEN }}"
            automatic_release_tag: "latest"
            prerelease: true
            title: "Development Build ${{ env.APP_VERSION }}"
            files: |
                *.tar

        - name: Create GitHub release archives
          if: "contains(github.ref, 'tags/v')"
          run: |
            tar cvf ${{ env.APP_NAME }}-v${{ env.APP_VERSION }}-${{ env.APP_ARCHITECTURE }}-debug.tar -C debug .
            tar cvf ${{ env.APP_NAME }}-v${{ env.APP_VERSION }}-${{ env.APP_ARCHITECTURE }}-release.tar -C release .

        - name: Create Release ${{ env.APP_VERSION }}
          uses: "marvinpinto/action-automatic-releases@latest"
          if: "contains(github.ref, 'tags/v')"
          with:
            repo_token: "${{ secrets.GITHUB_TOKEN }}"
            prerelease: false
            files: |
              *.tar
